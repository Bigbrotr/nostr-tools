name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Linux build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libffi-dev build-essential autoconf automake libtool

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test]

    - name: Run unit tests only (skip integration)
      run: |
        python -m pytest -m "not integration" --cov=nostr_tools --cov-report=xml --cov-report=term-missing
      env:
        NOSTR_SKIP_INTEGRATION: "true"

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run Ruff linting
      run: ruff check nostr_tools tests examples

    - name: Run Ruff formatting
      run: |
        echo "üé® Checking code formatting..."
        if ruff format --check nostr_tools tests examples; then
          echo "‚úÖ Code formatting is already correct"
        else
          echo "‚ùå Code formatting issues found"
          echo "Run 'ruff format nostr_tools tests examples' to fix formatting"
          exit 1
        fi

    - name: Run MyPy type checking
      run: mypy nostr_tools --ignore-missing-imports --show-error-codes

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[security]

    - name: Run Bandit security checks
      run: |
        echo "üîí Running Bandit security checks..."
        bandit -r nostr_tools -f text --severity-level medium || {
          echo "‚ö†Ô∏è Security issues found but continuing CI"
          exit 0
        }

    - name: Run Safety dependency checks
      run: |
        echo "üõ°Ô∏è Checking dependencies for known vulnerabilities..."
        safety check --json || {
          echo "‚ö†Ô∏è Dependency vulnerabilities found but continuing CI"
          exit 0
        }

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ github.sha }}
        path: dist/
        retention-days: 30

  integration:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, lint]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test]

    - name: Run integration tests
      run: |
        echo "üåê Running integration tests (with network access)..."
        python -m pytest -m integration --tb=short -v
      env:
        NOSTR_SKIP_INTEGRATION: "false"
        NOSTR_TEST_TIMEOUT: "30"
      timeout-minutes: 10

  performance:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test]

    - name: Run performance tests
      run: |
        echo "üèÉ Running performance benchmarks..."
        python -m pytest -m slow --tb=short -v
      timeout-minutes: 15
