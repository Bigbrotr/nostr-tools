name: CI - Tests & Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"

jobs:
  # Pre-commit checks that mirror your local setup
  pre-commit:
    name: Pre-commit Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .[dev]

    - name: Cache pre-commit
      uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

    - name: Run pre-commit hooks
      run: |
        python -m pre_commit run --all-files --show-diff-on-failure

  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .[dev]

    - name: Run Ruff linter
      run: |
        echo "::group::Ruff Linting"
        python -m ruff check src/nostr_tools tests examples --output-format=github
        echo "::endgroup::"

    - name: Check Ruff formatting
      run: |
        echo "::group::Ruff Formatting"
        python -m ruff format --check src/nostr_tools tests examples --exclude="src/nostr_tools/_version.py"
        echo "::endgroup::"

    - name: Run MyPy type checking
      run: |
        echo "::group::MyPy Type Checking"
        python -m mypy src/nostr_tools --show-error-codes
        echo "::endgroup::"

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .[dev]

    - name: Run Bandit security linter
      run: |
        echo "::group::Bandit Security Scan"
        python -m bandit -r src/nostr_tools -f json -o bandit-report.json
        python -m bandit -r src/nostr_tools
        echo "::endgroup::"

    - name: Run Safety dependency check
      run: |
        echo "::group::Safety Dependency Check"
        python -m safety check --json --output safety-report.json || true
        python -m safety check
        echo "::endgroup::"

    - name: Run pip-audit
      run: |
        echo "::group::pip-audit Vulnerability Check"
        python -m pip_audit --format=json --output=pip-audit-report.json || true
        python -m pip_audit
        echo "::endgroup::"

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.sha }}
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json
        retention-days: 30

  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        os: [ubuntu-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .[test]

    - name: Run all tests with coverage
      run: |
        python -m pytest \
          --cov=nostr_tools \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          tests/ \
          -v --tb=short

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      with:
        name: coverage-reports-${{ github.sha }}
        path: |
          coverage.xml
          htmlcov/
        retention-days: 30

  # Build package to ensure it works
  build:
    name: Build Package
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Fetch full history for setuptools-scm
        fetch-depth: 0

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        python -m twine check dist/*

    - name: Test package installation
      run: |
        python -m pip install dist/*.whl
        python -c "import nostr_tools; print(f'✅ nostr_tools v{nostr_tools.__version__} installed successfully')"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages-${{ github.sha }}
        path: dist/
        retention-days: 30


  # Final status check
  all-checks-passed:
    name: All Checks Passed
    if: always()
    needs: [pre-commit, quality, security, test, build]
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - name: Check all job results
      run: |
        echo "Job results:"
        echo "pre-commit: ${{ needs.pre-commit.result }}"
        echo "quality: ${{ needs.quality.result }}"
        echo "security: ${{ needs.security.result }}"
        echo "test: ${{ needs.test.result }}"
        echo "build: ${{ needs.build.result }}"

        # Check if any required job failed
        if [[ "${{ needs.pre-commit.result }}" != "success" ]] || \
           [[ "${{ needs.quality.result }}" != "success" ]] || \
           [[ "${{ needs.security.result }}" != "success" ]] || \
           [[ "${{ needs.test.result }}" != "success" ]] || \
           [[ "${{ needs.build.result }}" != "success" ]]; then
          echo "❌ One or more required checks failed"
          exit 1
        else
          echo "✅ All checks passed successfully!"
        fi
