name: Documentation Build and Deploy

on:
  push:
    branches: [ main, master ]
    paths:
      - 'docs/**'
      - 'nostr_tools/**'
      - 'README.md'
      - 'pyproject.toml'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'docs/**'
      - 'nostr_tools/**'
      - 'README.md'
      - 'pyproject.toml'
  workflow_dispatch:  # Allow manual triggering

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build documentation
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version info

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'  # Use a stable Python version
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pandoc  # For markdown processing if needed

    - name: Install package with documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[docs]

    - name: Verify package installation
      run: |
        python -c "import nostr_tools; print(f'Package version: {nostr_tools.__version__}')"

    - name: Build documentation
      run: |
        cd docs
        python -m sphinx -b html . _build/html -W --keep-going
      env:
        SPHINX_BUILD: "1"  # Tell the package we're building docs

    - name: Check documentation build
      run: |
        if [ ! -f "docs/_build/html/index.html" ]; then
          echo "Error: Documentation build failed - no index.html found"
          exit 1
        fi
        echo "Documentation built successfully"
        ls -la docs/_build/html/

    - name: Setup Pages
      uses: actions/configure-pages@v3
      if: github.event_name != 'pull_request'

    - name: Upload documentation artifact
      uses: actions/upload-pages-artifact@v2
      if: github.event_name != 'pull_request'
      with:
        path: ./docs/_build/html

    - name: Upload PR preview artifact
      uses: actions/upload-artifact@v3
      if: github.event_name == 'pull_request'
      with:
        name: documentation-preview
        path: ./docs/_build/html
        retention-days: 7

  # Deploy to GitHub Pages (only on push to main/master)
  deploy:
    if: github.event_name != 'pull_request'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

  # Comment on PR with preview link (for pull requests)
  pr-comment:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    permissions:
      pull-requests: write

    steps:
    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.find(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('ðŸ“š Documentation Preview')
          );

          const commentBody = `ðŸ“š **Documentation Preview**

          The documentation has been built successfully for this PR.

          You can download the preview artifact from the [Actions tab](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) to review the changes locally.

          To view the artifact:
          1. Go to the Actions tab
          2. Click on this workflow run
          3. Download the "documentation-preview" artifact
          4. Extract and open \`index.html\` in your browser
          `;

          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }
