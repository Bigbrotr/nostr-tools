name: Documentation and Quality Assurance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Set permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  quality-checks:
    name: Code Quality and Security
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libffi-dev build-essential autoconf automake libtool

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-py${{ matrix.python-version }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-py${{ matrix.python-version }}-pip-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test,security]

    - name: Code formatting check
      run: make format-check

    - name: Linting check
      run: make lint

    - name: Type checking
      run: make type-check

    - name: Security scanning
      run: make security-scan

    - name: Dependency vulnerability check
      run: make deps-check

  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libffi-dev build-essential autoconf automake libtool

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test]

    - name: Run unit tests
      run: make test-unit

    - name: Run security tests
      run: make test-security

    - name: Run integration tests
      run: make test-integration
      continue-on-error: true  # Integration tests may fail due to network issues

    - name: Run performance tests
      run: make test-performance
      continue-on-error: true  # Performance tests may be slow

    - name: Generate coverage report (Python 3.11 only)
      if: matrix.python-version == '3.11'
      run: make test-cov

    - name: Upload coverage to Codecov (Python 3.11 only)
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: [quality-checks]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libffi-dev build-essential autoconf automake libtool

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-docs-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-docs-
          ${{ runner.os }}-pip-

    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[docs]

    - name: Build documentation
      run: make docs-build

    - name: Check documentation links
      run: |
        pip install linkchecker
        linkchecker docs/_build/html/ || echo "Link checking completed with warnings"

    - name: Upload documentation artifact
      uses: actions/upload-artifact@v4
      with:
        name: documentation-${{ github.sha }}
        path: docs/_build/html/
        retention-days: 30

    # Deploy to GitHub Pages only on main branch
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: docs/_build/html/
        force_orphan: true
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: 'Deploy documentation for ${{ github.sha }}'

  package-validation:
    name: Package Build and Validation
    runs-on: ubuntu-latest
    needs: [quality-checks, test-suite]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: make build

    - name: Validate package
      run: make verify

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ github.sha }}
        path: dist/
        retention-days: 7