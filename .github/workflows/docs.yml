name: Documentation - Build & Deploy

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'src/**'
      - 'README.md'
      - 'CHANGELOG.md'
      - 'pyproject.toml'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'src/**'
      - 'README.md'
      - 'CHANGELOG.md'
      - 'pyproject.toml'
      - '.github/workflows/docs.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"

jobs:
  # Build documentation
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version info

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .[docs]

    - name: Check if docs directory exists
      id: check-docs
      run: |
        if [ -d "docs" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "‚úÖ docs/ directory found"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "üìù docs/ directory not found, will create basic documentation"
        fi

    - name: Create basic documentation structure
      if: steps.check-docs.outputs.exists == 'false'
      run: |
        mkdir -p docs

        # Create conf.py for Sphinx
        cat > docs/conf.py << 'EOF'
        """Sphinx configuration for nostr-tools documentation."""
        import os
        import sys
        sys.path.insert(0, os.path.abspath('../src'))

        # Project information
        project = 'nostr-tools'
        copyright = '2024, Bigbrotr'
        author = 'Bigbrotr'

        # Get version from package
        try:
            from nostr_tools import __version__
            release = __version__
            version = '.'.join(release.split('.')[:2])
        except ImportError:
            release = '0.1.0'
            version = '0.1'

        # Extensions
        extensions = [
            'sphinx.ext.autodoc',
            'sphinx.ext.autosummary',
            'sphinx.ext.napoleon',
            'sphinx.ext.viewcode',
            'sphinx.ext.intersphinx',
            'myst_parser',
        ]

        # Autodoc settings
        autodoc_typehints = 'description'
        autodoc_member_order = 'bysource'

        # Napoleon settings
        napoleon_google_docstring = True
        napoleon_numpy_docstring = True

        # Intersphinx mapping
        intersphinx_mapping = {
            'python': ('https://docs.python.org/3', None),
            'aiohttp': ('https://docs.aiohttp.org/en/stable/', None),
        }

        # Theme
        html_theme = 'sphinx_rtd_theme'
        html_static_path = ['_static']

        # Source file extensions
        source_suffix = {
            '.rst': None,
            '.md': 'myst_parser.parsers.myst',
        }

        # Master document
        master_doc = 'index'
        EOF

        # Create index.rst
        cat > docs/index.rst << 'EOF'
        nostr-tools Documentation
        =========================

        Welcome to nostr-tools, a comprehensive Python library for Nostr protocol interactions.

        .. toctree::
           :maxdepth: 2
           :caption: Contents:

           readme
           api
           changelog

        Indices and tables
        ==================

        * :ref:`genindex`
        * :ref:`modindex`
        * :ref:`search`
        EOF

        # Create API reference
        cat > docs/api.rst << 'EOF'
        API Reference
        =============

        .. automodule:: nostr_tools
           :members:
           :undoc-members:
           :show-inheritance:

        Core Module
        -----------

        .. automodule:: nostr_tools.core
           :members:
           :undoc-members:
           :show-inheritance:

        Actions Module
        --------------

        .. automodule:: nostr_tools.actions
           :members:
           :undoc-members:
           :show-inheritance:

        Utils Module
        ------------

        .. automodule:: nostr_tools.utils
           :members:
           :undoc-members:
           :show-inheritance:

        Exceptions Module
        -----------------

        .. automodule:: nostr_tools.exceptions
           :members:
           :undoc-members:
           :show-inheritance:
        EOF

        # Include README
        cat > docs/readme.md << 'EOF'
        ```{include} ../README.md
        ```
        EOF

        # Include CHANGELOG
        cat > docs/changelog.md << 'EOF'
        ```{include} ../CHANGELOG.md
        ```
        EOF

        # Create static directory
        mkdir -p docs/_static

        echo "‚úÖ Basic documentation structure created"

    - name: Build documentation with Sphinx
      run: |
        cd docs
        sphinx-build -b html . _build/html -W --keep-going

    - name: Check documentation links
      run: |
        cd docs
        sphinx-build -b linkcheck . _build/linkcheck
      continue-on-error: true

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation-${{ github.sha }}
        path: docs/_build/html/
        retention-days: 30

    outputs:
      docs-built: "true"

  # Validate documentation in PRs
  validate-docs:
    name: Validate Documentation
    runs-on: ubuntu-latest
    needs: build-docs
    timeout-minutes: 10

    steps:
    - name: Download documentation
      uses: actions/download-artifact@v4
      with:
        name: documentation-${{ github.sha }}
        path: ./docs

    - name: Check documentation size
      run: |
        DOC_SIZE=$(du -sh docs | cut -f1)
        echo "üìä Documentation size: $DOC_SIZE"

        # Check if docs are too large (> 100MB)
        SIZE_BYTES=$(du -sb docs | cut -f1)
        if [ $SIZE_BYTES -gt 104857600 ]; then
          echo "‚ö†Ô∏è Documentation is larger than 100MB"
          exit 1
        fi

    - name: Check for broken internal links
      run: |
        echo "üîç Checking for broken internal links..."
        find docs -name "*.html" -exec grep -l "404\|broken\|not found" {} \; || true

    - name: Validate HTML
      run: |
        echo "‚úÖ Documentation validation completed"

        # Deploy to GitHub Pages
  deploy-github-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: validate-docs
    if: startsWith(github.ref, 'refs/tags/v*') && github.ref == 'refs/heads/main'
    timeout-minutes: 10

    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Download documentation
      uses: actions/download-artifact@v4
      with:
        name: documentation-${{ github.sha }}
        path: ./docs

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./docs

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
