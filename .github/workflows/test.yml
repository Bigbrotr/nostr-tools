name: Test & Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .[dev,security]
    
    - name: Run pre-commit checks
      run: |
        python -m pre_commit run --all-files
    
    - name: Security scan with Bandit
      run: |
        python -m bandit -r src/nostr_tools -f json -o bandit-report.json
        python -m bandit -r src/nostr_tools
    
    - name: Check dependencies for vulnerabilities
      run: |
        python -m safety check
        python -m pip_audit
    
    - name: Upload security results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-results
        path: bandit-report.json

  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    needs: quality-checks
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        os: [ubuntu-latest]
        include:
          # Test on multiple OS with latest Python
          - python-version: "3.11"
            os: windows-latest
          - python-version: "3.11"  
            os: macos-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .[test]
    
    - name: Run unit tests
      run: |
        python -m pytest tests/ -m "unit or not integration" -v --tb=short
    
    - name: Run integration tests
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      run: |
        python -m pytest tests/ -m integration -v --tb=short
      continue-on-error: true  # Integration tests may fail due to network issues

  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .[test]
    
    - name: Run tests with coverage
      run: |
        python -m pytest --cov=nostr_tools --cov-report=xml --cov-report=html --cov-report=term
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-results
        path: |
          coverage.xml
          htmlcov/

  build-test:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - uses: actions/checkout@v4
      with:
        # Fetch full history for setuptools-scm
        fetch-depth: 0
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        python -m twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/
        retention-days: 7

  # Final check that combines all results  
  all-checks:
    name: All Checks Passed
    if: always()
    needs: [quality-checks, test, test-coverage, build-test]
    runs-on: ubuntu-latest
    
    steps:
    - name: Check all job results
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}
        allowed-failures: test-coverage  # Allow coverage to be optional