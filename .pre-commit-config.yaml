# =====================================================
# Pre-commit Configuration for nostr-tools
# =====================================================
# Professional code quality automation
# Install: pre-commit install
# Run manually: pre-commit run --all-files
# Update hooks: pre-commit autoupdate
# =====================================================

repos:
  # ===================================================
  # Code Formatting and Linting
  # ===================================================

  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.13.3
    hooks:
      # Ruff linter with auto-fix
      - id: ruff
        name: ruff-lint
        args: [--fix, --exit-non-zero-on-fix]
        description: Fast Python linter with auto-fixes

      # Ruff formatter
      - id: ruff-format
        name: ruff-format
        description: Fast Python formatter (Black-compatible)

  # ===================================================
  # Static Type Checking
  # ===================================================

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.18.2
    hooks:
      - id: mypy
        name: mypy
        description: Static type checking
        additional_dependencies:
          - types-requests
          - types-setuptools
          - aiohttp
          - pytest
        args: [--config-file=pyproject.toml]
        exclude: ^(tests/|examples/|docs/)

  # ===================================================
  # General File and Code Quality Checks
  # ===================================================

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      # File hygiene
      - id: trailing-whitespace
        name: trim-trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
        name: fix-end-of-files
      - id: check-merge-conflict
        name: check-merge-conflicts
      - id: check-case-conflict
        name: check-case-conflicts

      # Syntax validation
      - id: check-yaml
        name: check-yaml-syntax
        args: [--unsafe]  # Allow custom YAML tags
      - id: check-toml
        name: check-toml-syntax
      - id: check-json
        name: check-json-syntax

      # Python code quality
      - id: debug-statements
        name: check-debug-statements
        description: Check for debugger imports and breakpoints
      - id: check-docstring-first
        name: check-docstring-first
        description: Ensure docstrings come before code

      # Executable checks
      - id: check-executables-have-shebangs
        name: check-executable-shebangs
      - id: check-shebang-scripts-are-executable
        name: check-shebang-executables

      # Security
      - id: detect-private-key
        name: detect-private-keys
        description: Prevent committing private keys

  # ===================================================
  # Security Scanning
  # ===================================================

  - repo: local
    hooks:
      # Bandit security linter
      - id: bandit
        name: bandit-security
        description: Security vulnerability scanner
        entry: python -m bandit
        language: system
        args: [-r, src/nostr_tools, -c, pyproject.toml]
        pass_filenames: false
        files: ^src/.*\.py$

      # Safety dependency checker
      - id: safety
        name: safety-check
        description: Known vulnerability checker
        entry: bash -c 'python -m safety check || true'
        language: system
        pass_filenames: false
        files: ^(pyproject\.toml|requirements.*\.txt)$

      # pip-audit for package vulnerabilities
      - id: pip-audit
        name: pip-audit
        description: Audit Python packages for vulnerabilities
        entry: bash -c 'python -m pip_audit --ignore-vuln GHSA-4xh5-x5gv-qwph --skip-editable || true'
        language: system
        pass_filenames: false
        files: ^(pyproject\.toml|requirements.*\.txt)$

  # ===================================================
  # Documentation Verification
  # ===================================================

  - repo: local
    hooks:
      - id: docs-check
        name: docs-verify
        description: Verify documentation builds without errors
        entry: bash -c 'if command -v sphinx-build >/dev/null 2>&1; then make docs-check; else echo "⚠️  Sphinx not installed, skipping docs check"; fi'
        language: system
        files: ^(docs/|src/.*\.py|README\.md|CHANGELOG\.md)$
        pass_filenames: false

# =====================================================
# Configuration
# =====================================================

# Install hooks for both commit and push
default_install_hook_types: [pre-commit, pre-push]

# Most hooks run on commit, heavy checks on push
default_stages: [commit]

# Files and directories to exclude globally
exclude: |
  (?x)^(
      build/|
      dist/|
      \.eggs/|
      .*\.egg-info/|
      \.git/|
      \.mypy_cache/|
      \.pytest_cache/|
      \.ruff_cache/|
      __pycache__/|
      \.venv/|
      venv/|
      node_modules/|
      backup_.*|
      docs/_build/|
      docs/_autosummary/|
      src/nostr_tools/_version\.py
  )$

# Minimum pre-commit version required
minimum_pre_commit_version: 3.0.0

# Stop on first failure for faster feedback
fail_fast: false

# CI configuration for pre-commit.ci
ci:
  autoupdate_schedule: weekly
  autofix_commit_msg: 'chore: auto-fix pre-commit issues'
  autoupdate_commit_msg: 'chore: update pre-commit hooks'
