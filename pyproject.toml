[build-system]
requires = ["setuptools>=68.0", "wheel", "setuptools-scm>=7.0"]
build-backend = "setuptools.build_meta"

[project]
name = "nostr-tools"
dynamic = ["version"]
description = "A comprehensive Python library for Nostr protocol interactions"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Bigbrotr", email = "hello@bigbrotr.com"}
]
maintainers = [
    {name = "Bigbrotr", email = "hello@bigbrotr.com"}
]
keywords = [
    "nostr", 
    "decentralized", 
    "social", 
    "protocol", 
    "websocket",
    "cryptography", 
    "bitcoin", 
    "schnorr", 
    "secp256k1", 
    "relay"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Communications",
    "Topic :: Security :: Cryptography",
    "Framework :: AsyncIO",
    "Typing :: Typed",
]

dependencies = [
    # Cryptographic dependencies
    "secp256k1>=0.14.0,<1.0.0",
    "bech32>=1.2.0,<2.0.0",
    # Network and WebSocket dependencies
    "aiohttp>=3.8.0,<4.0.0",
    "aiohttp-socks>=0.8.0,<1.0.0",
    # Python version compatibility
    "typing-extensions>=4.0.0; python_version<'3.10'",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=8.0.0,<9.0.0",
    "pytest-asyncio>=0.24.0,<1.0.0",
    "pytest-cov>=5.0.0,<6.0.0",
    "pytest-mock>=3.14.0,<4.0.0",
    "ruff>=0.8.0,<1.0.0",
    "mypy>=1.14.0,<2.0.0",
    "pre-commit>=4.0.0,<5.0.0",
    "build>=1.0.0",
    "twine>=6.0.0",
]

# Testing dependencies (minimal for CI)
test = [
    "pytest>=8.0.0,<9.0.0",
    "pytest-asyncio>=0.24.0,<1.0.0",
    "pytest-cov>=5.0.0,<6.0.0",
    "pytest-mock>=3.14.0,<4.0.0",
]

# Security scanning
security = [
    "bandit[toml]>=1.8.0,<2.0.0",
    "safety>=3.0.0,<4.0.0",
    "pip-audit>=2.7.0,<3.0.0",
]

# Documentation generation
docs = [
    "sphinx>=8.0.0,<9.0.0",
    "sphinx-rtd-theme>=3.0.0,<4.0.0",
    "myst-parser>=4.0.0,<5.0.0",
]

# Performance profiling
perf = [
    "pytest-benchmark>=5.0.0,<6.0.0",
    "memory-profiler>=0.61.0,<1.0.0",
]

# All development dependencies
all = ["nostr-tools[dev,test,security,docs,perf]"]

[project.urls]
Homepage = "https://github.com/bigbrotr/nostr-tools"
Documentation = "https://bigbrotr.github.io/nostr-tools"
Repository = "https://github.com/bigbrotr/nostr-tools.git"
"Bug Reports" = "https://github.com/bigbrotr/nostr-tools/issues"
"Source Code" = "https://github.com/bigbrotr/nostr-tools"
Changelog = "https://github.com/bigbrotr/nostr-tools/blob/main/CHANGELOG.md"

# Package discovery (for src layout)
[tool.setuptools.packages.find]
where = ["src"]
include = ["nostr_tools*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
nostr_tools = ["py.typed"]

# Setuptools-scm for version management
[tool.setuptools_scm]
write_to = "src/nostr_tools/_version.py"
fallback_version = "0.1.0"

# Ruff configuration (linting and formatting)
[tool.ruff]
target-version = "py39"
line-length = 88
extend-exclude = [
    "build",
    "dist", 
    "*.egg-info",
    "__pycache__",
    ".venv",
    ".git",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings  
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "PTH",  # flake8-use-pathlib
    "RUF",  # ruff-specific rules
    "N",    # pep8-naming
    "S",    # flake8-bandit
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "S101",   # assert statements (OK in tests)
    "S311",   # pseudo-random generators (OK for non-crypto use)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]  # imported but unused
"tests/*" = ["F401", "F811", "S101", "S106"]  # test-specific ignores
"examples/*" = ["T201", "S106"]  # print statements OK in examples

[tool.ruff.lint.isort]
known-first-party = ["nostr_tools"]
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "secp256k1.*",
    "bech32.*",
    "aiohttp_socks.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-v",
    "--strict-markers",
    "--disable-warnings",
    "--tb=short"
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests (fast, no external dependencies)",
    "integration: Integration tests (may require network)",
    "slow: Slow tests (proof-of-work, network operations)",
    "security: Security-focused tests",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src/nostr_tools"]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "examples"]
skips = ["B101", "B601"]  # Skip assert and shell usage warnings